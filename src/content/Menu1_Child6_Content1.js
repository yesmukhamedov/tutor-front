import React from 'react';

const Menu1_Child6_Content1 = () => {
    return (
        <>
            <p><b>If,elif,else… операторларының көмегімен салыстыру</b></p>
            <b>Жоспар:</b>
            <ol>
                <li>Шартты оператор көмегімен ақиқат немесе жалған екендігін тексеру</li>
                <li>Шарт ішіне шарт қою арқылы ақиқат немесе жалған екендігін тексеру</li>
                <li>Көпнұсқадағы шартты тексеру</li>
                <li>Бірнеше салыстыруларды біріктіру</li>
            </ol>
            <p>Алдыңғы сабағымызда тек мәліметтердің құрылымы жайлы қозғаған болсақ,енді код құрылымына алғашқы қадамдарды жасаймыз. Код құрлымына алғашқы мысалымызды келтірейк. Бульдік мағынадағы  disaster айнымалысын шындық немесе жалған екендігін тексеріп, кансолға сәйкес сөзді шығарады.</p>
            <p>{'>>>'} disaster = True</p>
            <p>{'>>>'} if disaster:</p>
            <p>...     print("Woe!")</p>
            <p>... else:</p>
            <p>...     print("Whee!")</p>
            <p>...</p>
            <p><b>Output:</b></p>
            <p>Woe!</p>
            <p>If…… else операторлары берілген айнымалының мәні шындық немесе жалған екендігін көрсетеді. Ал print() функциясы сол мәнді кансолға шығарады. Print() функциясын кодтың әр бөлігіне қолданғанда алдына бос орындар қойылады. Негізі төрт бос орын қоюға кеңес беріледі.</p>
            <p>Кодтың орындалу реті:</p>
            <ul>
                <li>disaster айнымалысына бульдік мағынадағы True мәнін бердік</li>
                <li>if және else операторлары арқылы айнымалы мәнінің шын немесе жалған екендігін тексердік</li>
                <li>Орындалған шарт ішіндегі мәтінді экранға шығару үшін print() функциясын шақырдық</li>
            </ul>
            <p>Шарт ішіне шарт қойып тексеріп көрсе де болады мысалы:</p>
            <p>{'>>>'} furry = True</p>
            <p>{'>>>'} small =True</p>
            <p>{'>>>'} if furry:</p>
            <p>...     if small:</p>
            <p>...        print("It's a cat.")</p>
            <p>...     else:</p>
            <p>...        print("It's a dog.")</p>
            <p>... else:</p>
            <p>...     if small:</p>
            <p>...        print("It's a butterfly")</p>
            <p>...     else:</p>
            <p>...        print("It's a human")</p>
            <p>...</p>
            <p><b>Output:</b></p>
            <p>It's a cat.</p>
            <p>Python тілінде бастапқы if операторы орындалмаған жағдайда жоғарыдағы кодта көрсетілгендей бірнеше шартты тексеру қажет болса  жұп else операторын бос орындар арқылы ажыратады. Біздің жағдайда furry айнымалысы True болғандықтан if операторының ішін орындайды. Яғни if small: операторын орындауға көшеді small айнымалысы да True болғандықтанэкранға “It's a cat.” мәтінін шығарады. </p>
            <p>Ал егерде екіден де көп нұсқадағы шарттарды тексеру қажет болса elif операторын қолдансақ болады.Мысалы:</p>
            <p>{'>>>'} color = "puce"</p>
            <p>{'>>>'} if color == "red":</p>
            <p>...    print("It's a tomato")</p>
            <p>... elif color == "green":</p>
            <p>...    print("It's a green pepper")</p>
            <p>... else:</p>
            <p>...    print("I've never heard of the color"+color)</p>
            <p><b>Output:</b></p>
            <p>I've never heard of the color puce</p>
            <p>Жоғарыда көрсетілген мысалда (==) біз салыстыру операторын қолдандық. Python тілінде төмендегідей салыстыру операторлары қолданылады.</p>
            <ul>
                <li>Теңдік (==);</li>
                <li>Теңсіздік (!=);</li>
                <li>Кіші ({'<'});</li>
                <li>Кіші немесе тең ({'<'}=);</li>
                <li>Үлкен ({'>'});</li>
                <li>Үлкен немесе тең ({'>'}=);</li>
                <li>Қосу (in…);</li>
            </ul>
            <p>Бұл операторлар True немесе False бульдік мағыналарын қайтарады. Операторлардың қалай жұмыс жасайтындығын тексеріп көрелік. Алдымен х айнымалысына 7 мәнін меншіктеп алайық.</p>
            <p>{'>>>'} x =7</p>
            <p>Енді бірнеше операторлармен тексеріп көрейік:</p>
            <p>{'>>>'} x==5</p>
            <p>False</p>
            <p>{'>>>'} x==7</p>
            <p>True</p>
            <p>{'>>>'} 5{'<'}x</p>
            <p>True</p>
            <p>{'>>>'} x{'<'}10</p>
            <p>True</p>
            <p>Теңдік операторында екі теңдік белгісі қолданылған себебі бір ғана теңдік Python – да меншіктеу операторы болып табылады.</p>
            <p>Егер де сізге бірнеше салыстыру амалдарын орындау қажет болса, онда and,or  және not бульдік операторларын қолдансаңыз болады.</p>
            <p>{'>>>'} 5{'<'}x or x{'<'}10</p>
            <p>True</p>
            <p>{'>>>'} 5{'<'}x and x{'>'}10</p>
            <p>False</p>
            <p>{'>>>'} 5{'<'}x and not x{'>'}10</p>
            <p>True</p>
            <p>Бірнеше салыстыруларды біріктіру мақсатында and операторын қолданған болсаңыз оны python тілінде мына түрде жазуға болады:</p>
            <p>{'>>>'} 5{'<'}x{'<'}10</p>
            <p>True</p>
            <p>{'>>>'} 5{'<'}x{'<'}10{'<'}99</p>
            <p>True</p>
            <p>Егерде біз тексеріп жатқан элемент бульдік амал болмаса Python тілі нені True және False деп қабылдайды? False мағынасын  тек False бульдік мәнімен  берудің қажеті жоқ. False мағынасына тең мағыналар да бар. Олар:</p>
            <ul>
                <li>Бульдік айнымалы False;</li>
                <li>None мағынасы;</li>
                <li>0 бүтін саны;</li>
                <li>0.0 бөлшек саны;</li>
                <li>Бос жол (‘ ’);</li>
                <li>Бос тізім ([ ]);</li>
                <li>Бос кортеж (());</li>
                <li>Бос сөздік ({});</li>
                <li>Бос жиын (set()).</li>
            </ul>
            <p>Басқа мағынадағы мәндер True бульдік мәнімен теңеседі.</p>
            <p>{'>>>'} some_list =[]</p>
            <p>{'>>>'} if some_list:</p>
            <p>...     print("There's something is here")</p>
            <p>... else:</p>
            <p>...     print("Hey. It's empty")</p>
            <p><b>Output:</b></p>
            <p>Hey. It's empty</p>
            <div><b>Пайдаланылған әдебиеттер тізімі</b></div>
            <ol>
                <li>Билл Любанович, Простой Python. Современный стиль программирования, екінші шығарылым,Санк – Петербург,2021.- 531 – 539 стр.</li>
                <li>Python 3 для начинающих <a href='https://pythonworld.ru/samouchitel-python'>https://pythonworld.ru/samouchitel-python</a></li>
                <li>Django Fan <a href='https://djangofan.ru/python-literals'>https://djangofan.ru/python-literals</a></li>
            </ol>
        </>
    )
}

export default Menu1_Child6_Content1;