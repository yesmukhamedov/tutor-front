import React from 'react';
import Menu1_Child3_Content1_Image1 from '../assets/images/Menu1_Child3_Content1_Image1.png';
import PieceEditor from '../components/PieceEditor';

const Menu1_Child3_Content1 = () => {
    // const Menu1_Child3_Content1_Image1 = '';
    return (
        <>
        <p><b>Типтер, мәліметтер – литералдар</b></p>
        <b>Жоспар:</b>
        <ol>
          <li>Python - да деректер объектілер болып табылады</li>
          <li>Мәліметтер типі</li>
          <li>Мәндер – литералдар</li>
          <li>Айнымалылар</li>
        </ol>
        <p>Компьютеріңіздің жадын сөрелердің ұзын сериясы түрінде көзбен көруге болады. Бұл сөрелердегі әр ұяшықтың ені 1 байт (8 бит). Слоттар 0-ден (бірінші позиция) аяғына дейін нөмірленеді. Қазіргі компьютерлерде миллиардтаған байт жады (гигабайт) бар, сондықтан сөрелер үлкен қиял қоймасын толтыра алады. Python бағдарламасы амалдық жүйенің көмегімен компьютердің белгілі бір жад аймағына қол жеткізе алады. Бұл жад бағдарламаның коды үшін, сондай-ақ бағдарлама жұмыс істейтін деректер үшін қолданылады. Амалдық жүйе бағдарламаның басқаларға тиісті жад аймақтарының рұқсатынсыз оқи немесе жаза алмауын қамтамасыз етеді.</p>
        <div>
          <img src={Menu1_Child3_Content1_Image1} alter={'Menu1_Child3_Content1_Image1.png'}/>
          Сурет 1
        </div>
        <p>Жоғары да айтып кеткендей Python тілінде обьектілер сөрелердегі әр ұяшықта орналасады(сурет 1), қажет емес болған жағдайда ұяшықтарды тазартып отырады. Ұяшықта мәліметтер (яғни объектілер) осы түрде орналасады:</p>
        <ul>
            <li>Тип – мәліметтің яғни объектінің қолданылу аймағын білдіреді((integer)бүтін санмен немесе жолдық қатарлармен(string) т.б.) </li>
            <li>Идентификатор – басқа объектілерден айыруға мүмкіндік беретін даралығы </li>
            <li>Мағынасы – объект типіне сәйкесінше </li>
            <li>Есептеуші сілтеме – объект қаншалықты дарежеде қолданылатындығын анықтаушы</li>
        </ul>
        <p><i>Идентификатор</i> объектінің сөрелерде орналасу мекенін көрсетеді. Тип қорап сыртындағы мөрге ұқсайды, себебі объектінің қолданылу мүмкіндігін көрсетеді. Яғни объект бүтін сан болса  ол  int типін қабылдайды және дәл сондай типтегі басқа объектіге қосыла алады. Егер де қорап түссіз материалдан жасалды десек, онда біз сол қорап ішіндегі объект мағынасын көре аламыз. Ал <i>есептеуіш сілтеме</i> жайлы алдағы тарауларда тереңірек қозғаймыз.</p>
        <p>Мәліметтер типі (кесте 1) – де көрсетілген. Кестеде сәйкесінше тип атауы, типтің өзі  және айнымалының мәнін өзгертуге болады немесе болмайтындығын үшінші жолда көрсетілген, төртінші жолда әр типке мысал келтірілген.</p>
        <table>
            <tr>
                <td>Аты</td>
                <td>Типі</td>
                <td>Өзгереді?</td>
                <td>Мысал</td>
            </tr>
            <tr>
                <td>Бульдік мағына</td>
                <td>Bool</td>
                <td>Жоқ</td>
                <td>True, False</td>
            </tr>
            <tr>
                <td>Бүтін сан</td>
                <td>int</td>
                <td>Жоқ</td>
                <td>1, 47, 1999</td>
            </tr>
            <tr>
                <td>Бөлшек сан</td>
                <td>Float</td>
                <td>Жоқ</td>
                <td>3.14, 2.7e5</td>
            </tr>
            <tr>
                <td>Комплекс сандар</td>
                <td>complex</td>
                <td>Жоқ</td>
                <td>3j,5+9j</td>
            </tr>
            <tr>
                <td>Мәтіндік қатар</td>
                <td>str</td>
                <td>Жоқ</td>
                <td>‘alas’,”alack”,”’a verse attack”’</td>
            </tr>
            <tr>
                <td>Список</td>
                <td>list</td>
                <td>Иә</td>
                <td>[‘Winken’,’Blinken’,’Nod’]</td>
            </tr>
            <tr>
                <td>Кортеж</td>
                <td>tuple</td>
                <td>Жоқ</td>
                <td>(2,4,8)</td>
            </tr>
            <tr>
                <td>Байттар</td>
                <td>Bytes</td>
                <td>Жоқ</td>
                <td>b’ab\xff</td>
            </tr>
            <tr>
                <td>Байттар массиві</td>
                <td>Bytearray</td>
                <td>Иә</td>
                <td>bytearray(…)</td>
            </tr>
            <tr>
                <td>Жиын</td>
                <td>set</td>
                <td>Иә</td>
                <td>set([3,5,7])</td>
            </tr>
            <tr>
                <td>Анықталған жиын</td>
                <td>frozenset</td>
                <td>Жоқ</td>
                <td>frozenset([‘Elsa’,’Otto’])</td>
            </tr>
            <tr>
                <td>Сөздік</td>
                <td>dict</td>
                <td>Иә</td>
                <td>{"{‘game’:’bingo’,’dog’:’dingo’,’drummer’:’Ringo’}"}</td>
            </tr>
        </table>
        <div>Кесте 1. Мәліметтер типі</div>
        <p>Айнымалы мәнін өзгертуге болады немесе болмайтындығын мәліметтер типі анықтайды. Қорапта орналасқан объект мәнін өзгертуге болатын болса ол – <i>өзгеретін мән</i> , ал егер тұрақты болса ол – <i>өзгермейтін мән</i>. Өзгермейтін мән түссіз барлық жағынан жабылған  қорапта орналасқан объект секілді, яғни біз ол айнымалыны көреміз бірақ өзгерте алмаймыз, ал өзгеретін мән қақпағы бар қорап секілді, себебі біз оның көріп қана қоймай типін өзгертпестен мәнін өзгерте аламыз.</p>
        <p>Python <i>қатаң</i> типтелген тілге жатады, ол демек объектінің мәні өзгергенімен типі өзгермейді дегенді білдіреді.</p>
        <p><b>Мәндер – литералдар</b></p>
        <p>Python тілінде мәліметтерді анықтаудың екі түрі бар:</p>
        <ul>
            <li>литерал ретінде</li>
            <li>айнымалы ретінде</li>
        </ul>
        <p>Литерал – Python тілінде объект құрудың қарапайым  әрі жылдам түрі. Мысал келтіретін болсақ:</p>
        <PieceEditor coge={`1 #сандық литерал \n"I'am a string" #жолдық литерал \n[1, 2, 4, 6] #тізім литералы \n{'a': 1, 'b': 2, 'c': 3} #сөздік литералы`} line={4}/>
        <p>Құрылған объектті меншіктеу </p>
        <PieceEditor code={"a = 1"}/>
        <p>яғни сол жағында айнымалы, оң жағында литерал.</p>
        <p><b>Айнымалы</b></p>
        <p>Айнымалы – ол құрылған объекті атауы. Python тілінде айнымалы құрудың өз ережесі бар.</p>
        <ol>
            <li>
                <p>Айнымалылар төмендегі символдар арқылы құрылады:</p>
                <ul>
                    <li>Латын кіші әріптерімен (a -z)</li>
                    <li>Латын бас әріптерімен (A-Z)</li>
                    <li>Цифрлар (0-9)</li>
                    <li>Астыңғы сызық (_)</li>
                </ul>
            </li>
            <li>Айнымалылар латын әріпімен немесе астыңғы сызықпен басталуы тиіс</li>
            <li>Python астыңғы сызықпен басталатын айнымалыларды тезірек өңдейді</li>
            <li>Айнымалылар Python тілінде қолданылатын арнайы терминдерден құрылмауы тиіс</li>
        </ol>
        <p>Төменде Python тілінде қолданылатын арнайы терминдер қатары:</p>
        <table>
            <tr>
                <td>false</td>
                <td>await</td>
                <td>else</td>
                <td>import</td>
                <td>pass</td>
            </tr>
            <tr>
                <td>none</td>
                <td>break</td>
                <td>except</td>
                <td>in</td>
                <td>raise</td>
            </tr>
            <tr>
                <td>true</td>
                <td>class</td>
                <td>finally</td>
                <td>is</td>
                <td>return</td>
            </tr>
            <tr>
                <td>and</td>
                <td>continue</td>
                <td>for</td>
                <td>lambda</td>
                <td>try</td>
            </tr>
            <tr>
                <td>as</td>
                <td>def</td>
                <td>from</td>
                <td>nonlocal</td>
                <td>while</td>
            </tr>
            <tr>
                <td>assert</td>
                <td>del</td>
                <td>global</td>
                <td>not</td>
                <td>with</td>
            </tr>
            <tr>
                <td>async</td>
                <td>elif</td>
                <td>if</td>
                <td>or</td>
                <td>yield</td>
            </tr>
        </table>
        <br></br>
        <p>Айнымалыларды дұрыс құру мысалдары:</p>
        <ul>
            <li>a;</li>
            <li>a1;</li>
            <li>a_b__95;</li>
            <li>_a;</li>
            <li>_a1;</li>
        </ul>
        <p>Айнымалылар қате құрылса:</p>
        <ul>
            <li>1a;</li>
            <li>1;</li>
            <li>1_;</li>
            <li>name !;</li>
            <li>another-name;</li>
        </ul>
        <div><b>Пайдаланылған әдебиеттер тізімі</b></div>
        <ol>
          <li>Билл Любанович, Простой Python. Современный стиль программирования, екінші шығарылым,Санк – Петербург,2021.- 531 – 539 стр.</li>
          <li>Python 3 для начинающих <a href={"https://pythonworld.ru/samouchitel-python"}>https://pythonworld.ru/samouchitel-python</a></li>
          <li>Django Fan <a href={"https://djangofan.ru/python-literals "}>https://djangofan.ru/python-literals</a></li>
        </ol>
        </>
    )
}

export default Menu1_Child3_Content1;