import React from 'react';

const Menu2_Child2_Content1 = () => {
    return (
        <>
            <p><b>Функциялар</b></p>
            <p><b>Жоспар:</b></p>
            <ol>
                <li>Функция</li>
                <li>Бос функция</li>
                <li>Функцияға аргумент беру</li>
                <li>Кілттік аргументтер</li>
                <li>*args және **kwargs</li>
                <li>Көріну аймағы және глобалды айнымалы</li>
            </ol>
            <p>Функция – бұл өзіңіз анықтаған структура. Онда аргумент болуын немесе болмауын шешу қажет болады. Кілт сөздерді аргумент ретінде де қосуға болады. Функция <b>def</b> кілт сөзінен басталады және функция атауынан соң қоснүкте қойылады. Мысалы:</p>
            <p>{'>>>'} def a_function():</p>
            <p>...     print("You just created a function!")</p>
            <p>...</p>
            <p>{'>>>'} </p>
            <p>Бұл функция экранға ешқандай мәнді шығармайды.Функцияны шақыру үшін бізге функция атауын жақшамен бірге көрсету қажет:</p>
            <p>{'>>>'} a_function()</p>
            <p><b>Output</b></p>
            <p>"You just created a function!"</p>
            <p><b>Бос функция</b></p>
            <p>Кейде өзінде код болмайтын функцияны жариялап қана қою керек болады. Мысалы:</p>
            <p>{'>>>'} def empty_function():</p>
            <p>...     pass</p>
            <p>...</p>
            <p>{'>>>'} </p>
            <p>Оператор pass бос операция, яғни  ештеңе орындалмайды</p>
            <p><b>Функцияға аргумент беру</b></p>
            <p>Енді біз аргументі бар функцияларды құрып көрейік. Екі санның қосындысын табатын қарапайым функция құрып көрейік:</p>
            <p>{'>>>'} def add(a,b):</p>
            <p>...     return a+b</p>
            <p>...     print(add(1,2))</p>
            <p>...</p>
            <p>{'>>>'} add(1,2)</p>
            <p>Output</p>
            <p>3</p>
            <p>Көріп тұрғаныңыздай екі аргументтен туратын функцияны шақырғанда оған екі мән берілуі тиіс. Егер де бір ғана мән берілсе, ол қате болады:</p>
            <p>{'>>>'} add(1)</p>
            <p>Traceback (most recent call last):</p>
            <p>File {'"<stdin>"'}, line 1, in {'<module>'}</p>
            <p>TypeError: add() missing 1 required positional argument: 'b'</p>
            <p>{'>>>'} </p>
            <p>Функциядан алынған нәтижені әрі қарайда қолданғыңыз келсе, онда нәтижені айнымалыға меншіктейміз. Мысалы:</p>
            <p>{'>>>'} total = add(2,3)</p>
            <p>{'>>>'} print(total)</p>
            <p><b>Output</b></p>
            <p>5</p>
            <p><b>Кілттік аргументтер</b></p>
            <p>Функция кілттік аргументтерді де қабылдайды. Кілттік аргументтер функция құрылғанда аргументке бірденен мәнді беру.Мысалы:</p>
            <p>{'>>>'} def keyword_function(a=1, b=2):</p>
            <p>...     return a+b</p>
            <p>...     print(keyword_function(b=4,a=5))</p>
            <p>...</p>
            <p>{'>>>'} keyword_function(b=4,a=5)</p>
            <p><b>Output</b></p>
            <p>9</p>
            <p>Ал егер де ешқандай аргументсіз бос функцияны шақырсақ экранға 3 саны шығады себебі функция үнсіздік жағдайда кілттік аргументтер мәнін қабылдайды.</p>
            <p>{'>>>'} keyword_function()</p>
            <p><b>Output</b></p>
            <p>3</p>
            <p>Енді бір ғана жай аргументтен, бірнеше кілттік аргументтерден тұратын функция құрайық:</p>
            <p>{'>>>'} def mixed_function(a,b=2,c=3):</p>
            <p>...           return a+b+c</p>
            <p>...</p>
            <p>{'>>>'} mixed_function(b=4,c=5)</p>
            <p>Traceback (most recent call last):</p>
            <p>File {'"<stdin>"'}, line 1, in {'<module>'}</p>
            <p>TypeError: mixed_function() missing 1 required positional argument: 'a'</p>
            <p>{'>>>'} </p>
            <p>{'>>>'} mixed_function(1, b=4,c=5)</p>
            <p><b>Output</b></p>
            <p>10</p>
            <p>{'>>>'} mixed_function(1)</p>
            <p><b>Output</b></p>
            <p>6</p>
            <br></br>
            <p>Бірінші мысалымызда экранға қате шығарды, себебі біз жай аргументке мәнін беру арқылы функцияны шақыруымыз қажет еді. Ал екінші мысалда 10 саны экранға шығарылды. Кілттік аргумент мәндері өзгерді және жай аргументке 1 мәні берілді. Үшінші мысалда 6 саны экранға шықты. Себебі жай аргументке 1 мәнін бердік, ал кілттік аргументтер үнсіз жағдайда бастапқы мәндерін қабылдайды.</p>
            <p><b>*args және **kwargs</b></p>
            <p>Шексіз сандағы аргументтерді алу үшін *args, ал егер шексіз сандағы кілттік аргументтерді алу үшін **kwargs көмекші сөздерін қолданса болады. Бұнда негізгі мағына жұлдызшада. args  және kwargs сөздерінен басқа сөздерді де қолданса болады. Мысал келтіріп көрейік:</p>
            <p>{'>>>'} def many(*args, **kwargs):</p>
            <p>...     print(args)</p>
            <p>...     print(kwargs)</p>
            <p>...</p>
            <p>{'>>>'} many(1,2,3, name = "Mike", job="programmer")</p>
            <p><b>Output</b></p>
            <p>(1, 2, 3)</p>
            <p>{"{'name': 'Mike', 'job': 'programmer'}"}</p>
            <p>Бірінші кезекте біз жаңа синтаксис арқылы фнукция құрдық. Содан кейін функцияны үш жай аргумент және екі кілттік аргументтерін беру арқылы шақырдық. Функция екі типтегі аргументтерді қайтарды.Яғни args кортеж, ал kwargs cөздік мәніне ие болды.</p>
            <p><b>Көріну аймағы және глобалды айнымалы</b></p>
            <p>Көріну аймағы, ол айнымалының қолданылу аясын білдіреді.Егер де айнымалыны функция ішінде анықтасақ, ол айнымалы тек сол функция ішінде қолданылады. Функция аяқталғанда ол айнымалыны қолданбау керек, себебі айнымалы көріну аймағынан тыс жерде қалады. Мысал келтіріп көрейік:</p>
            <p>{'>>>'} def function_a():</p>
            <p>...     a=1</p>
            <p>...     b=2</p>
            <p>...</p>
            <p>{'>>>'} def function_b():</p>
            <p>...     c=3</p>
            <p>...     return a+c</p>
            <p>...</p>
            <p>{'>>>'} function_a()</p>
            <p>{'>>>'} function_b()</p>
            <p>Traceback (most recent call last):</p>
            <p>File {'"<stdin>"'}, line 1, in {"<module>"}</p>
            <p>File {'"<stdin>"'}, line 3, in function_b</p>
            <p>NameError: name 'a' is not defined</p>
            <p>Python – да бұл мәселені айнымалыны глобалды ету арқылы шешуге болады. Мысалы:</p>
            <p>{'>>>'} def function_a():</p>
            <p>...     global a</p>
            <p>...     a=1</p>
            <p>...     b=2</p>
            <p>...     return a+b</p>
            <p>...</p>
            <p>{'>>>'} def function_b():</p>
            <p>...     c=3</p>
            <p>...     return a+c</p>
            <p>...</p>
            <p>{'>>>'} function_a()</p>
            <p>3</p>
            <p>{'>>>'} function_b()</p>
            <p>4</p>
            <div><b>Пайдаланылған әдебиеттер тізімі</b></div>
            <ol>
                <li>Билл Любанович, Простой Python. Современный стиль программирования, екінші шығарылым,Санк – Петербург,2021.- 531 – 539 стр.</li>
                <li>Python 3 для начинающих <a href='https://pythonworld.ru/samouchitel-python'>https://pythonworld.ru/samouchitel-python</a></li>
            </ol>
        </>
    )
}

export default Menu2_Child2_Content1;